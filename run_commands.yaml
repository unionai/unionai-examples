tutorials/sentiment_classifier/sentiment_classifier.py:
  - git clone https://github.com/unionai/unionai-examples
  - cd unionai-examples
  - union run --remote tutorials/sentiment_classifier/sentiment_classifier.py main --model distilbert-base-uncased
tutorials/reddit_slack_bot/reddit_slack_bot.py:
  - git clone https://github.com/unionai/unionai-examples
  - cd unionai-examples
  - "# follow the example below to create secrets before running this command"
  - union run --remote tutorials/reddit_slack_bot/reddit_slack_bot.py reddit_wf --kickoff_time 2024-01-01 --lookback_days 1000
tutorials/time_series_forecasting/workflows/time_series_workflow.py:
  - git clone https://github.com/unionai/unionai-examples
  - cd unionai-examples/tutorials/time_series_forecasting
  - union run --remote --copy-all workflows/time_series_workflow.py time_series_workflow --steps 5
tutorials/agentic_rag/agentic_rag.py:
  - git clone https://github.com/unionai/unionai-examples
  - cd unionai-examples/tutorials/agentic_rag
  - '# create an OpenAI API key: https://platform.openai.com/api-keys, then run the following command'
  - union secrets create openai_api_key --value <your_openai_api_key>
  - '# create the vector store'
  - union run --remote agentic_rag.py create_vector_store --query "CRISPR therapy" --load_max_docs 10
  - '# run the RAG workflow'
  - union run --remote --copy-all agentic_rag.py agentic_rag_workflow --user_message "Tell me about the latest CRISPR therapies"
